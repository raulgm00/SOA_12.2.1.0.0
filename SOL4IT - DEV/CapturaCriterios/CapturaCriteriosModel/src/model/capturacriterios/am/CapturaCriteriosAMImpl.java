package model.capturacriterios.am;


import beans.BeanCriterio;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;

import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.context.FacesContext;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import model.capturacriterios.am.common.CapturaCriteriosAM;
import model.capturacriterios.vo.ConcentradoraVOImpl;
import model.capturacriterios.vo.ConcentradoraVORowImpl;
import model.capturacriterios.vo.ControlEtapasViewImpl;
import model.capturacriterios.vo.ControlEtapasViewRowImpl;
import model.capturacriterios.vo.ListaArchiDescartarVOImpl;
import model.capturacriterios.vo.ListaArchivosVOImpl;
import model.capturacriterios.vo.ListaFuenteVOImpl;
import model.capturacriterios.vo.ListaOperadorAlmonedaVOImpl;
import model.capturacriterios.vo.ListaSucursalesVOImpl;
import model.capturacriterios.vo.MaximaEtapaVOImpl;
import model.capturacriterios.vo.MaximaEtapaVORowImpl;
import model.capturacriterios.vo.MaximaSubEtapaVOImpl;
import model.capturacriterios.vo.MaximaSubEtapaVORowImpl;
import model.capturacriterios.vo.RolByIdVOImpl;
import model.capturacriterios.vo.SecuenciaIDSolicitudImpl;
import model.capturacriterios.vo.SecuenciaIDSolicitudRowImpl;
import model.capturacriterios.vo.TabNumPartDesVOImpl;
import model.capturacriterios.vo.TabNumPartDesVORowImpl;
import model.capturacriterios.vo.TabNumPartVOImpl;
import model.capturacriterios.vo.TabNumPartVORowImpl;
import model.capturacriterios.vo.TabSucExpVOImpl;
import model.capturacriterios.vo.TabSucExpVORowImpl;
import model.capturacriterios.vo.UserByIdVOImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;


import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

import org.xml.sax.SAXException;
//import oracle.jbo.domain.Date;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 14 09:28:35 CDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// --------------------------------------------------------------------- 
   
   public class CapturaCriteriosAMImpl extends ApplicationModuleImpl implements CapturaCriteriosAM {
   private static Object fee;
   //private Row rowConcentradora;
   
    

    /**
     * This is the default constructor (do not remove).
     */
    public CapturaCriteriosAMImpl() {
        
    }
    
    

    /** Métodos de implementación
     * Carga inicial de la pantalla
     * */
    
    
    /*public void iniciarConcentradora(Integer tipo) {
        System.out.println("tipo = " + tipo );
        int tipoP = tipo ; 
        
        if(evaluateEL("#{pageFlowScope.p_tipoP}") != null){
            tipoP = Integer.parseInt( evaluateEL("#{pageFlowScope.p_tipoP}").toString() );
            System.out.println("iniciarConcentradora = " + tipoP);
        }else{
            System.out.println("el parametro {pageFlowScope} no fue recibido");    
        }
        
        //System.out.println("\nSe inicia la intancia :");
        //Inicializacion de la fecha
        Date date = new Date();
        //Obtenemos el renglon de nuestro VO
        
        Row rowConcentradora = this.getConcentradoraVO1().createRow();
        rowConcentradora.setAttribute("FechaSolicitud", formateaDate(date));
        //System.out.println("tipoP = " +  tipoP);
        String proyecto = "";
        if(tipoP == 1 ){
                proyecto ="Concentradora";
        }else if( tipoP == 2 ){
                proyecto ="Compra Cumplido";
        }
        
        rowConcentradora.setAttribute("ProyectoPantalla", proyecto);
        rowConcentradora.setAttribute("Proyecto", tipoP);
        this.getConcentradoraVO1().insertRow(rowConcentradora);
        
        
    }*/
    
    public void iniciarConcentradora() {
        int tipoP = 0 ;
        
        if(evaluateEL("#{pageFlowScope.p_tipoP}") != null){
            //baja la variable
            tipoP = Integer.parseInt( evaluateEL("#{pageFlowScope.p_tipoP}").toString() );
            System.out.println("iniciaConcentradora() = " + tipoP);
        }else{
            System.out.println("el parametro #{pageFlowScope.p_tipoP} no fue recibido");    
        }
        
        //System.out.println("\nSe inicia la intancia :");
        //Inicializacion de la fecha
        Date date = new Date();
        //Obtenemos el renglon de nuestro VO
        
        Row rowConcentradora = this.getConcentradoraVO1().createRow();
        rowConcentradora.setAttribute("FechaSolicitud", formateaDate(date));
        //System.out.println("tipoP = " +  tipoP);
        String proyecto = "";
        if(tipoP == 1 ){
                proyecto ="Concentradora";
        }else if( tipoP == 2 ){
                proyecto ="Compra Cumplido";
        }
        
        rowConcentradora.setAttribute("ProyectoPantalla", proyecto);
        rowConcentradora.setAttribute("Proyecto", tipoP);
        this.getConcentradoraVO1().insertRow(rowConcentradora);
        
        
    }
    
    
    public void iniciarCompraCumplido() {
        int tipoP = 0 ;
        
        if(evaluateEL("#{pageFlowScope.p_tipoP}") != null){
            tipoP = Integer.parseInt( evaluateEL("#{pageFlowScope.p_tipoP}").toString() );
            System.out.println("iniciarCompraCumplido() = " + tipoP);
        }else{
            System.out.println("el parametro #{pageFlowScope.p_tipoP} no fue recibido");    
        }
        
        //System.out.println("\nSe inicia la intancia :");
        //Inicializacion de la fecha
        Date date = new Date();
        //Obtenemos el renglon de nuestro VO
        
        Row rowConcentradora = this.getConcentradoraVO1().createRow();
        rowConcentradora.setAttribute("FechaSolicitud", formateaDate(date));
        //System.out.println("tipoP = " +  tipoP);
        String proyecto = "";
        if(tipoP == 1 ){
                proyecto ="Concentradora";
        }else if( tipoP == 2 ){
                proyecto ="Compra Cumplido";
        }
        
        rowConcentradora.setAttribute("ProyectoPantalla", proyecto);
        rowConcentradora.setAttribute("Proyecto", tipoP);
        this.getConcentradoraVO1().insertRow(rowConcentradora);
        
        
    }
    
    
    public static Object evaluateEL(String el) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory =
            facesContext.getApplication().getExpressionFactory();
        ValueExpression exp =
            expressionFactory.createValueExpression(elContext, el,Object.class);
        return exp.getValue(elContext);
    }

    /** Método fortamtea Date-String(Formato)-Date*/
    private Date formateaDate(Date date) {

        SimpleDateFormat ft = new SimpleDateFormat("dd/MM/yyyy hh:mm aa");
        //System.out.println("La Fecha actual es: " + ft.format(date) + "\n");

        try {
            date = ft.parse(ft.format(date));
        } catch (ParseException ep) {
            System.out.println("Excepción controlada : " + ep);
        }
        return date;
    }

    /** Boton de ingresa datos a tabla : tabNumPartVO*/
    /*Modifiacion pertinente Amarrado de Duplicados*/
    public String ingresarTabNumPart(int numPartida, String tipo) {
        
        if( Integer.toString(numPartida).toString().length() >= 7 && Integer.toString(numPartida).toString().length() <=9){
            
                    System.out.println("AM NumPartida = " + numPartida + "");
                    //System.out.println("tipo= "+tipo+"");
                    //System.out.println("Boton Ingresa Tabla Número de Partida ");
                    Row row = this.getTabNumPartVO1().createRow();
                    //System.out.println("Ingresando registro en Rabla Num-Part \n\n\n\n");
                    row.setAttribute("ID_TabNumPart", this.getTabNumPartVO1().getRowCount() + 1);
                    row.setAttribute("NumPartida", numPartida);
                    this.getTabNumPartVO1().insertRow(row);
        }else{
            return "Fail";
        }
         return "OK";   
    }
    
    /** Boton de ingresa datos a tabla : TabPartDesc*/
    public String ingresarTabPartDesc(int numPartidaDesmarcar) {
        
        if( Integer.toString(numPartidaDesmarcar).toString().length() >= 7 && Integer.toString(numPartidaDesmarcar).toString().length() <=9){
            
                    Row row = this.getTabNumPartDesVO1().createRow();
                    int p = this.getTabNumPartDesVO1().getRowCount() + 1;
                    System.out.println("Iterador Row = " + p);
                    row.setAttribute("ID_tabNumPartDes", this.getTabNumPartDesVO1().getRowCount() + 1);
                    row.setAttribute("NumPartDes", numPartidaDesmarcar);
                    this.getTabNumPartDesVO1().insertRow(row);
        }else{
            return "Fail 2";
        }
         return "OK";   
    }
    

    /** Boton de ingresa datos a tabla : SucExpVO*/
    public String ingresarTabSucExp(int sucursal, String expendio,String numeroExpendio) {
        //System.out.println("Sucursal: " + sucursal + "");
        //System.out.println("Expendio: " + expendio + "");
        Boolean duplicado = false;
        TabSucExpVOImpl TabSucExpVO = this.getTabSucExpVO1();
        TabSucExpVORowImpl TabSucExpVORow;
        
        if (TabSucExpVO.getRowCount() > 0) {
            for (int k = 0; k < TabSucExpVO.getRowCount(); k++) {
                TabSucExpVORow = (TabSucExpVORowImpl) TabSucExpVO.getRowAtRangeIndex(k);
                if (TabSucExpVORow.getSucursal().equals(Integer.toString(sucursal)) &&
                    TabSucExpVORow.getExpendio().equals(expendio)) {
                    //System.out.println("Registro duplicado");
                    return "Fail";
                }
            }
        }
        
        TabSucExpVORow = (TabSucExpVORowImpl) TabSucExpVO.createRow();
        TabSucExpVORow.setID_TabSucExp(TabSucExpVO.getRowCount() + 1);
        TabSucExpVORow.setSucursal(Integer.toString(sucursal));
        if(expendio == null )
            expendio = "Todos";
        TabSucExpVORow.setExpendio(expendio);
        TabSucExpVORow.setNumeroExpendio(numeroExpendio);
        TabSucExpVO.insertRow(TabSucExpVORow);
        return "OK";

    }
    
    //StartDefect : Logica de primera ves que ingresa a realizar una captira de criterios Author : Raul G, JC 08/02/2016
    /**Metodo que consulta las etapas existente en c/u proyectos*/
    public boolean consultarEtapas(int tp){
        boolean existe = false;
        
        this.getMaximaEtapaVO1().setNamedWhereClauseParam("t_proyecto", tp);
        MaximaEtapaVOImpl maximaVO = this.getMaximaEtapaVO1();
        maximaVO.executeQuery();
        MaximaEtapaVORowImpl rowMaxima = (MaximaEtapaVORowImpl) maximaVO.first();
        Integer etapa = rowMaxima.getNuevaEtapa().intValue();
        
        //System.out.println("Etapa = " + etapa );
        
        if(etapa == 1){
            //No existe una etapa
            existe = false;
        }else{
            //Si existe una etapa
            existe = true;
            
        }  
        //System.out.println("Bandera existe = " + existe);
        return existe;
    }
    //End Defect
    
    /*Método que asigna Etapa (la ultima +1)*/
    public void asignarEtapaOp1(int tp) {
        //Opción Si, se debe asignar en automatico la ultima etapa +1
        Row fila = this.getConcentradoraVO1().getCurrentRow();
        //System.out.println("Tipo de proyecto : AsignarEtapaOp1 : " + tp);
        this.getMaximaEtapaVO1().setNamedWhereClauseParam("t_proyecto", tp);
        MaximaEtapaVOImpl maximaVO = this.getMaximaEtapaVO1();
        maximaVO.executeQuery();
        MaximaEtapaVORowImpl rowMaxima = (MaximaEtapaVORowImpl) maximaVO.first();
        //System.out.println("Etapa: " + rowMaxima.getNuevaEtapa() );
        /*rowConcentradora.setAttribute("Etapa", rowMaxima.getNuevaEtapa() );
        rowConcentradora.setAttribute("SubEtapa", 1);
        System.out.println("Subetapa: " + 1 );
        */
        //System.out.println("Etapa maxima: " + rowMaxima.getNuevaEtapa() );
        fila.setAttribute("Etapa", rowMaxima.getNuevaEtapa() );
        fila.setAttribute("SubEtapa", 1);
    }

    /*Método asignar Etapa Lista*/
    public void asignarEtapaOp2(int tp, int etapa) {
        //System.out.println("");
        //Opcion No
        //Método que asigna una consulta de BD  aun componente (ChoiseList)
        //System.out.println("La etapa a mandar como paramtro es : " + etapa);
        Row fila = this.getConcentradoraVO1().getCurrentRow();
        //System.out.println("Tipo de proyecto : AsignarEtapaOp2  : " + tp);
        this.getMaximaSubEtapaVO1().setNamedWhereClauseParam("t_proyecto", tp);
        this.getMaximaSubEtapaVO1().setNamedWhereClauseParam("p_etapa", etapa);
        this.getMaximaSubEtapaVO1().setRangeSize(-1);
        this.getMaximaSubEtapaVO1().executeQuery();

        int nroFilas = 0;
        Row rwMaximaSubetapa = this.getMaximaSubEtapaVO1().first();
        if (rwMaximaSubetapa != null) {
            nroFilas = ((Number) rwMaximaSubetapa.getAttribute("NuevaSubetapa")).intValue();
            //System.out.println("encontrado :" + nroFilas);
        }
        fila.setAttribute("SubEtapa", nroFilas);
        
    }
    
    /*Preparacion de informacion para servicio Receptor*/
    public String enviarCriterios(int pestania, String url) {
            
            
            System.out.println(" - Inicia eviarCriterios - ");
            ConcentradoraVOImpl concentradoraVO = this.getConcentradoraVO1();
            String arrayCriterios[] = new String[6];
            ArrayList <BeanCriterio> listCriterio = new ArrayList<BeanCriterio>();
            String resultado = "";
            ConcentradoraVORowImpl ConcentradoraRow = (ConcentradoraVORowImpl) concentradoraVO.getCurrentRow();
            BeanCriterio beanCriterio = new BeanCriterio();

            //StartDefect : Al realizar la primera captura de criterios, la logica impolementada en metodos
            //anteriores no funciona Author : Raul G /JC 08/02/2016
            //End Defect
            int globalEtapa;
            
            System.out.println("Nueva estapa ? " + ConcentradoraRow.getNuevaEtapa() + "");
            if (ConcentradoraRow.getNuevaEtapa().equals("0")) {
                globalEtapa = ConcentradoraRow.getEtapa();
            } else {
                globalEtapa = ConcentradoraRow.getEtapaCbo();
            }
            
            //Etapa
            arrayCriterios[0] = String.valueOf(globalEtapa);
            System.out.println("Etapa: " + globalEtapa);
            
            //Fecha Ejecucion
            String fE = "";
            
            if (ConcentradoraRow.getFechaEjecucion() != null)
                fE = castingDateUtil(ConcentradoraRow.getFechaEjecucion(), 1);
                System.out.println("Fecha Ejecucion Casteada: " + fE.toString());
                arrayCriterios[1] = fE;

            //Fecha Solicitud
            String fS = castingDateUtil(ConcentradoraRow.getFechaSolicitud(), 1);
            System.out.println("Fecha Solicitud Casteada: " + fS.toString());
            arrayCriterios[2] = fS;

            //ID Solicitud Secuencial
            SecuenciaIDSolicitudImpl SecuenciaIDSolicitudVO = this.getSecuenciaIDSolicitud1();
            SecuenciaIDSolicitudVO.executeQuery();
            SecuenciaIDSolicitudRowImpl SecuenciaIDSolicitudRow = (SecuenciaIDSolicitudRowImpl) SecuenciaIDSolicitudVO.getRowAtRangeIndex(0);
            int globalSolicitud = SecuenciaIDSolicitudRow.getNextval().intValue();
            arrayCriterios[3] = String.valueOf(globalSolicitud);
            System.out.println("ID Solicitud: " + globalSolicitud+"");

            //ID Proyecto
            //se Recupera el ID del proyecto selecionado
            System.out.println("Proyecto :" +ConcentradoraRow.getProyecto()+"");
            arrayCriterios[4] = ConcentradoraRow.getProyecto().toString();
            
            //Sub-Etapa
            int globalSubetapa = ConcentradoraRow.getSubEtapa().intValue();
            arrayCriterios[5] = String.valueOf(globalSubetapa);
            System.out.println("Sub-Etapa = "+ globalSubetapa+"");
            
            
            //opcion 1
            if (pestania == 1) {
                
                //Fecha Almoneda - Operador Almoneda
                String fA = null;
                String fA2 = null;
                if (ConcentradoraRow.getFechaIngresoAlmoneda() != null){
                    fA = castingDateUtil(ConcentradoraRow.getFechaIngresoAlmoneda(), 3);
                    if(ConcentradoraRow.getFechaIngresoAlmonedaFin()!=null){
                        fA2 = castingDateUtil(ConcentradoraRow.getFechaIngresoAlmonedaFin(), 3);   
                        fA= fA+","+fA2;
                        System.out.println("AlmonedaConcat"+fA+"");
                    }
                    beanCriterio = new BeanCriterio();
                    beanCriterio.setNombreCriterio("ingresoalmo");
                    beanCriterio.setValorCriterio(fA);
                    beanCriterio.setNombreSubCriterio("operadorFechaAlmo");
                    beanCriterio.setValorSubCriterio(ConcentradoraRow.getOperadorFechaIngresoAlmoneda());
                    listCriterio.add(beanCriterio);
                    System.out.println("Fecha Ingreso Almoneda = "+ ConcentradoraRow.getFechaIngresoAlmoneda());
                    System.out.println("Operador FechaIngreso Almoneda = " + ConcentradoraRow.getOperadorFechaIngresoAlmoneda());
                }
                
                //Fuente
                if (ConcentradoraRow.getFuente() != null) {
                    beanCriterio = new BeanCriterio();
                    beanCriterio.setNombreCriterio("fuente");
                    beanCriterio.setValorCriterio(ConcentradoraRow.getFuente().toString()); 
                    listCriterio.add(beanCriterio);
                    System.out.println("Fuente= "+ ConcentradoraRow.getFuente()+"");
                    
                }
                
                //Ramo-SubRamo
                if (ConcentradoraRow.getRamo() != null) {
                    //Ramo - Subramo
                    beanCriterio = new BeanCriterio();
                    beanCriterio.setNombreCriterio("ramo");
                    beanCriterio.setValorCriterio(ConcentradoraRow.getRamo().toString());
                    //Subramo
                    beanCriterio.setNombreSubCriterio("subramo");
                    beanCriterio.setValorSubCriterio(ConcentradoraRow.getSubramo().toString());
                    listCriterio.add(beanCriterio);
                    System.out.println("Ramo = "+ ConcentradoraRow.getRamo().toString()  );
                    System.out.println("Subramo = " + ConcentradoraRow.getSubramo().toString());
                    

                }
                
                //Factor
                if (ConcentradoraRow.getFactor() != null) {
                    beanCriterio = new BeanCriterio();
                    beanCriterio.setNombreCriterio("factor");
                    beanCriterio.setValorCriterio(ConcentradoraRow.getFactor().toString());
                    listCriterio.add(beanCriterio);
                    System.out.println("Factor = " + ConcentradoraRow.getFactor());
                    
                }
                
                //Start : Acondicionamiento para el proyecto "Compra Cumplido" 13/01/2015 Autor: R. Garcia
                //Canal Ingreso
                if( ConcentradoraRow.getProyecto() == 1){
                
                    if (ConcentradoraRow.getCanalIngreso() != null) {
                        beanCriterio = new BeanCriterio();
                        beanCriterio.setNombreCriterio("canal");
                        beanCriterio.setValorCriterio(ConcentradoraRow.getCanalIngreso().toString());
                        listCriterio.add(beanCriterio);
                        System.out.println("CanalIngreso = "+ ConcentradoraRow.getCanalIngreso() );
                    }
                    
                }/*else if(ConcentradoraRow.getProyecto() == 2){
                    //Canal Ingreso (por default CU Cumplido ("6")
                    beanCriterio = new BeanCriterio();
                    beanCriterio.setNombreCriterio("canal");
                    //beanCriterio.setValorCriterio(ConcentradoraRow.getCanalIngreso().toString());
                    beanCriterio.setValorCriterio("6");
                    listCriterio.add(beanCriterio);
                    System.out.println("CanalIngreso = 6");
                    
                }*/
                //END

                ///Refrendos
                if (ConcentradoraRow.getRefrendos() != null) {
                    beanCriterio = new BeanCriterio();
                    beanCriterio.setNombreCriterio("refrendos");
                    beanCriterio.setValorCriterio(ConcentradoraRow.getRefrendos().toString());
                    listCriterio.add(beanCriterio);
                    System.out.println("Refrendos = " + ConcentradoraRow.getRefrendos());
                }

                //Edo. Prenda
                    if (ConcentradoraRow.getEdoPrenda() != null) {
                        beanCriterio = new BeanCriterio();
                        beanCriterio.setNombreCriterio("edoprenda");
                        beanCriterio.setValorCriterio( ConcentradoraRow.getEdoPrenda().toString());
                        //beanCriterio.setValorCriterio("22");
                        listCriterio.add(beanCriterio);
                        System.out.println("Edo Prenda= "+ ConcentradoraRow.getEdoPrenda() );
                    }
                    
                
                
                //Sucursal-Expendio
                if (ConcentradoraRow.getSucursal() != null ) {
                    beanCriterio = new BeanCriterio();
                    beanCriterio.setNombreCriterio("sucursal");
                    beanCriterio.setValorCriterio(ConcentradoraRow.getSucursal().toString());
                    System.out.println("Sucursal = "+ ConcentradoraRow.getSucursal()+"");
                    //Expendio
                    if (ConcentradoraRow.getExpendio()!=null){
                    beanCriterio.setNombreSubCriterio("expendio");
                    beanCriterio.setValorSubCriterio(ConcentradoraRow.getExpendio().toString());
                    System.out.println("Expendio = " + ConcentradoraRow.getExpendio());
                    }
                    listCriterio.add(beanCriterio);
                }
                
            } else if (pestania == 2) {
                //opcion2
                //Recuperamos Tabla vista: se recorre y se cream la lista de beans
                //System.out.println("Lista TabSucExp");
                TabSucExpVOImpl TabSucExpVO = this.getTabSucExpVO1();
                TabSucExpVORowImpl TabSucExpVORow = null;
                //System.out.println("Tamaño TabSucExp: " + TabSucExpVO.getRowCount() + "");
                HashMap<String, String> tabSucExp = new HashMap<String, String>();
                String cadena = "";

                //Falta correjir a enviar los datos
                for (int k = 0; k < TabSucExpVO.getRowCount(); k++) {
                    TabSucExpVORow = (TabSucExpVORowImpl) TabSucExpVO.getRowAtRangeIndex(k);
                    if (tabSucExp.isEmpty()) {
                        tabSucExp.put(TabSucExpVORow.getSucursal().toString(), TabSucExpVORow.getExpendio().toString());
                        cadena = "";
                    } else {

                        if (tabSucExp.containsKey(TabSucExpVORow.getSucursal().toString())) {
                            cadena += "," + tabSucExp.get(TabSucExpVORow.getSucursal().toString()).toString();
                            tabSucExp.remove(TabSucExpVORow.getSucursal().toString());
                            tabSucExp.put(TabSucExpVORow.getSucursal().toString(),
                                          (TabSucExpVORow.getExpendio().toString() + cadena));
                            cadena = "";
                        } else {

                            tabSucExp.put(TabSucExpVORow.getSucursal().toString(), TabSucExpVORow.getExpendio().toString());
                        }

                    }
                }


                Iterator<String> keySetIterator = tabSucExp.keySet().iterator();
                while (keySetIterator.hasNext()) {
                    beanCriterio = new BeanCriterio();

                    //clave
                    String key = keySetIterator.next();
                    beanCriterio.setNombreCriterio("sucursal");
                    beanCriterio.setValorCriterio(key);
                    //valor
                    String value = tabSucExp.get(key);
                    Boolean ban = false;
                    String splitExpendio [] = value.split(",");
                    
                    for(String i: splitExpendio){
                        if(i.equals("Todos")){
                            ban = true;
                            break;
                        }
                    }
                    if( !ban ){
                        beanCriterio.setNombreSubCriterio("expendio");
                        beanCriterio.setValorSubCriterio(value);
                    }
                    listCriterio.add(beanCriterio);
                }
             
            } else if( pestania == 3){
                //opcion3
                TabNumPartVOImpl TabNumPartVO = this.getTabNumPartVO1();
                TabNumPartVORowImpl TabNumPartVORow = null;
                //System.out.println("Tamanio TabSucExp: " + TabNumPartVO.getRowCount() + "");
                String cadena = "";
                for (int j = 0; j < TabNumPartVO.getRowCount(); j++) {
                    TabNumPartVORow = (TabNumPartVORowImpl) TabNumPartVO.getRowAtRangeIndex(j);
                    //System.out.println("NumeroPartida = " + TabNumPartVORow.getNumPartida() + "");
                    if (j == 0) {
                        cadena += TabNumPartVORow.getNumPartida().toString();
                    } else {
                        cadena += "," + TabNumPartVORow.getNumPartida().toString();
                    }

                }
                beanCriterio = new BeanCriterio();
                beanCriterio.setNombreCriterio("partida");
                beanCriterio.setValorCriterio(cadena);
                listCriterio.add(beanCriterio);

            }else{
                
                // Opcion 4
                TabNumPartDesVOImpl TabNumPartDesVO = this.getTabNumPartDesVO1();
                TabNumPartDesVORowImpl TabNumPartDesVORow = null;
                
                String cadena = "";
                for (int j = 0; j < TabNumPartDesVO.getRowCount(); j++) {
                    TabNumPartDesVORow = (TabNumPartDesVORowImpl) TabNumPartDesVO.getRowAtRangeIndex(j);
                    //System.out.println("NumeroPartida = " + TabNumPartVORow.getNumPartida() + "");
                    if (j == 0) {
                        cadena += TabNumPartDesVORow.getNumPartDes().toString();
                    } else {
                        cadena += "," + TabNumPartDesVORow.getNumPartDes().toString();
                    }

                }
                beanCriterio = new BeanCriterio();
                beanCriterio.setNombreCriterio("desmarcar");
                beanCriterio.setValorCriterio(cadena);
                listCriterio.add(beanCriterio);
                
            }
            
            //return "0|Exito";/*
            try {
                
                // Start - Defect : Envio de Criterio : Pestaña - Cnal Venta siempre y sea tp de proyecto 'Compra Cumplido' Author: Raul G. Date: 04/01/2016
                if(ConcentradoraRow.getProyecto() == 2){
                    
                    beanCriterio = new BeanCriterio();
                    beanCriterio.setNombreCriterio("pestana");
                    beanCriterio.setValorCriterio(String.valueOf(pestania) );
                    System.out.println("Pestaña : " +  String.valueOf(pestania) );
                    listCriterio.add(beanCriterio);
                    
                    if(ConcentradoraRow.getCanalVenta() != null){
                        beanCriterio = new BeanCriterio();
                        beanCriterio.setNombreCriterio("canalventa");
                        beanCriterio.setValorCriterio(ConcentradoraRow.getCanalVenta().toString());
                        System.out.println("Canal de Venta:" + ConcentradoraRow.getCanalVenta().toString());
                        listCriterio.add(beanCriterio);
                    }
                    //Start Defect: Se implementa el envio de Canal de ingreso para los 3 escenarios posibles Author: Raul G. 12/02/2016                    //Canal Ingreso (por default CU Cumplido ("6")
                     beanCriterio = new BeanCriterio();
                     beanCriterio.setNombreCriterio("canal");
                     //beanCriterio.setValorCriterio(ConcentradoraRow.getCanalIngreso().toString());
                     beanCriterio.setValorCriterio("6");
                     listCriterio.add(beanCriterio);
                     System.out.println("CanalIngreso = 6");
                    //End Start Defect
                     
                    //Edo. Prenda (por default CC "AL Almoneda 22")
                    beanCriterio = new BeanCriterio();
                    beanCriterio.setNombreCriterio("edoprenda");
                    //beanCriterio.setValorCriterio( ConcentradoraRow.getEdoPrenda().toString());
                    beanCriterio.setValorCriterio("22");
                    listCriterio.add(beanCriterio);
                    System.out.println("Edo Prenda = 22" );
                                    
                     
                     
                }
                //End

                // es nueva etapa = SI
                if (ConcentradoraRow.getNuevaEtapa().equals("0")) {
                    // comparamos que el id generado siga siendo el mismo.
                    MaximaEtapaVOImpl maximaVO = this.getMaximaEtapaVO1();
                    maximaVO.executeQuery();
                    MaximaEtapaVORowImpl rowMaxima = (MaximaEtapaVORowImpl) maximaVO.first();
                    // si no hubo cambios
                    if (rowMaxima.getNuevaEtapa().intValue() == ConcentradoraRow.getEtapa().intValue()) {
                        // insertar un nuevo registro

                        String resultadoServicio[] =
                            invocarServicio(arrayCriterios[0], arrayCriterios[1], arrayCriterios[2], arrayCriterios[3],
                                            arrayCriterios[4], arrayCriterios[5], listCriterio, url);
                        
                        resultado = resultadoServicio[0] + "|" + resultadoServicio[1];

                        System.out.println("resultado del am : " + resultado );
                        //Exitoso
                        if (resultadoServicio[0].equals("0")) { // envio exitoso
                            //Start : Defect Correccion del guardado de fecha en BD Autor: R. Garciac 15/01/2015
                            insertarNuevoControlEtapa(Integer.parseInt(arrayCriterios[4]),globalSolicitud, globalEtapa, globalSubetapa, castingDateUtil(ConcentradoraRow.getFechaEjecucion(), 2), castingDateUtil(ConcentradoraRow.getFechaSolicitud(), 2) );
                            //End
                        }


                    } else {
                        // si hubo un cambio, hay que que lanzar alerta
                        // EL NUMERO DE ETAPA YA SE ENCUENTRA REGISTRADO
                        return "EE";
                        //throw new JboException("El número de Etapa ya se encuentra registrado, verifique");
                    }

                } else {
                    // SI NO ES NUEVA ETAPA, entonces  se valida la sub etapa.

                    this.getMaximaSubEtapaVO1().setNamedWhereClauseParam("p_etapa", globalEtapa);
                    this.getMaximaSubEtapaVO1().setRangeSize(-1);
                    this.getMaximaSubEtapaVO1().executeQuery();
                    MaximaSubEtapaVORowImpl rwMaximaSubetapa =
                        (MaximaSubEtapaVORowImpl) this.getMaximaSubEtapaVO1().first();

                    // No se ha generado una nueva subetaap
                    if (rwMaximaSubetapa.getNuevaSubetapa().intValue() == ConcentradoraRow.getSubEtapa().intValue()) {
                        String resultadoServicio[] =
                            invocarServicio(arrayCriterios[0], arrayCriterios[1], arrayCriterios[2], arrayCriterios[3],
                                            arrayCriterios[4], arrayCriterios[5], listCriterio, url);
                        resultado = resultadoServicio[0] + "|" + resultadoServicio[1];
                        System.out.println("resultado del am : " + resultado );
                        if (resultadoServicio[0].equals("0")) { // envio exitoso
                            //Start : Defect Correccion del guardado de fecha en BD Autor: R. Garciac 15/01/2015
                            insertarNuevoControlEtapa(Integer.parseInt(arrayCriterios[4]),globalSolicitud, globalEtapa, globalSubetapa, castingDateUtil(ConcentradoraRow.getFechaEjecucion(), 2), castingDateUtil(ConcentradoraRow.getFechaSolicitud(), 2) );
                            //End
                        }

                    } else {
                        // indica
                        // EL NUMERO DE SUB-ETAPA YA SE ENCUENTRA REGISTRADO
                        throw new JboException("El número de Sub Etapa ya se encuentra registrado, verifique");
                    }


                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            return resultado;

        }

    public void insertarNuevoControlEtapa(int tipoP,int idSolicitud, int etapa, int subetapa, String fechaEjecucion, String fechaSolictud) {

            ControlEtapasViewImpl controlVO = this.getControlEtapasView1();
            ControlEtapasViewRowImpl controlRW = (ControlEtapasViewRowImpl) controlVO.createRow();
            controlRW.setIdSolicitud(new Number(idSolicitud));
            controlRW.setIdProyecto(new Number( tipoP )); //ConcentradoraRow.getProyecto().intValue()));
            controlRW.setIdEtapa(new Number(etapa));
            controlRW.setFechaCreacionEtapa( fechaSolictud );
            controlRW.setIdSubetapa(new Number(subetapa));
            controlRW.setFechaCreacionSubetapa( fechaEjecucion );
            this.getTransaction().commit();
            

        }
    
    /*** metodo para enviar datos al servicio**/
    public String[] invocarServicio(String etapa, String fechaEjecucion, String fechaSolicitud, String idSolicitud,
                                    String proyecto, String subEtapa,
                                    ArrayList<BeanCriterio> listCriterio,
                                    String wsURL ) throws MalformedURLException, IOException {

        //Code to make a webservice HTTP request
        String responseString = "";
        String outputString = "";
        //Envio de Criterios BUS - MIDAS
        //Conexion a DR
        //String wsURL = "http://10.30.82.200:8011/NMP/Midas/EnvioCriteriosHttpService";
        // Conexion a PROD
        //String wsURL = "http://10.30.2.38:8011/NMP/Midas/EnvioCriteriosHttpService";
        //Conexion a TEST
        //String wsURL = "http://10.30.6.50:8011/NMP/Midas/EnvioCriteriosHttpService";
        //Conexion a DEV
        //String wsURL = "http://10.30.3.15:17005/NMP/Midas/EnvioCriteriosHttpService";
        
        System.out.println("wsURL = " + wsURL);
        
        URL url = new URL(wsURL);
        
        URLConnection connection = url.openConnection();
        HttpURLConnection httpConn = (HttpURLConnection) connection;
        ByteArrayOutputStream bout = new ByteArrayOutputStream();

        String cadenaXMLCriterios = "";
        Iterator<BeanCriterio> criterioIterator = listCriterio.iterator();
        while (criterioIterator.hasNext()) {

            BeanCriterio elementoCriterio = criterioIterator.next();

            String cadenaSubCriterio = "";
            String cadenaCriterio =
                "<criterio>" + "<nombre>" + elementoCriterio.getNombreCriterio() + "</nombre>" + "<valor>" +
                elementoCriterio.getValorCriterio() + "</valor>";

            if (elementoCriterio.getNombreSubCriterio() == null && elementoCriterio.getValorSubCriterio() == null) {

                cadenaSubCriterio = "<subCriterios>" + "<subcriterio> </subcriterio>" + "</subCriterios>";

            } else {

                cadenaSubCriterio =
                    "<subCriterios>" + "<subcriterio>" + "<nombre>" + elementoCriterio.getNombreSubCriterio() +
                    "</nombre>" + "<valor>" + elementoCriterio.getValorSubCriterio() + "</valor>" + "</subcriterio>" +
                    "</subCriterios>";

            }


            cadenaXMLCriterios = cadenaXMLCriterios + cadenaCriterio + cadenaSubCriterio + "</criterio>";


        }


        String xmlInput =
            "<EnvioCriteriosRequest>" + "<etapa>" + etapa + "</etapa>" + "<fechaEjecucion>" + fechaEjecucion +
            "</fechaEjecucion>" + "<fechaSolicitud>" + fechaSolicitud + "</fechaSolicitud>" + "<idSolicitud>" +
            idSolicitud + "</idSolicitud>" + "<proyecto>" + proyecto + "</proyecto>" + "<subetapa>" + subEtapa +
            "</subetapa>" + " <criterios>" + cadenaXMLCriterios + "</criterios>" + "</EnvioCriteriosRequest>";


        System.out.println(" xmlInput " + xmlInput);


        byte[] buffer = new byte[xmlInput.length()];
        buffer = xmlInput.getBytes();
        bout.write(buffer);
        byte[] b = bout.toByteArray();


        httpConn.setRequestProperty("Content-Length", String.valueOf(b.length));
        httpConn.setRequestProperty("Content-Type", "text/xml; charset=utf-8");
        //httpConn.setRequestProperty("SOAPAction", SOAPAction);
        httpConn.setRequestMethod("POST");
        httpConn.setDoOutput(true);
        httpConn.setDoInput(true);
        OutputStream out = httpConn.getOutputStream();
        //Write the content of the request to the outputstream of the HTTP Connection.
        System.out.println("out: "+out+"");
        out.write(b);
        out.close();
        BufferedReader in=null;
    
        //Read the response.
        //System.out.println("httpConn.getResponseCode = "+httpConn.getResponseCode()+"");
        //if ( httpConn.getResponseCode()==404  || httpConn.getResponseCode()==200 ){
        
        if (httpConn.getResponseCode()==404  ){
            String[] resultado = { "Error", String.valueOf(httpConn.getResponseCode())};
            return resultado;  
        }
        InputStreamReader isr = new InputStreamReader(httpConn.getInputStream());
        in = new BufferedReader(isr);
             

        //Write the SOAP message response to a String.
        while ((responseString = in.readLine()) != null) {
            outputString = outputString + responseString;
        }
        
        // PROCESAMOS SALIDA

        DocumentBuilder newDocumentBuilder = null;
        try {
            newDocumentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        } catch (ParserConfigurationException e) {
            System.out.println(e.fillInStackTrace());
        }

        Document parse = null;

        try {
            parse = newDocumentBuilder.parse(new ByteArrayInputStream(outputString.getBytes()));
        } catch (SAXException e) {
            System.out.println(e.fillInStackTrace());
        } catch (IOException e) {
            System.out.println(e.fillInStackTrace());
        }


        String codigoResultado = "-1";
        String mensajeResultado = "";

        if (parse != null) {

            NodeList code = parse.getElementsByTagName("code");
            codigoResultado = code.item(0).getTextContent();

            NodeList message;
            //StartDefect : Se advierte  al usuario de un posible error de Midas Author: Raul G. 25/02/2016
            if(code.toString().length() >= 1 && codigoResultado.equals("0") ){
                    
                    if (codigoResultado.equals("0")){
                        message = parse.getElementsByTagName("message");
                        mensajeResultado = message.item(0).getTextContent();    
                    }else{ 
                        message = parse.getElementsByTagName("description");
                        mensajeResultado = "Error en los parámetros recibidos\n"+message.item(0).getTextContent();
                        
                        }
            }else{
                //Error la respuesta no trae el nodo de descripcion
                codigoResultado = "-1";
                mensajeResultado = "Error el servicio no retornó valores de exito";
            }
            //End Defect
                    
        }

        String[] resultado = { codigoResultado, mensajeResultado };
        return resultado;


    }

    // Start - Defect : Los datos guardados en BD no se guardaban con el formato adecuado: Raul G. Date: 21/12/2013 
    /** Método fortamtea Date(domain)-Date(util)*/
    private String castingDateUtil(oracle.jbo.domain.Date date, int tf) {

        java.util.Date dateUtil = date.getValue();
        String NFDate = "";

        if (tf == 1) {
            SimpleDateFormat sdfUtil = new SimpleDateFormat("yyyy-MM-dd hh:mm aa");
            try {
                //devulev un String
                NFDate = sdfUtil.format(dateUtil);

                //System.out.println("Fecha Parciada a SimpleDateFormato : " + NFDate);


            } catch (Exception fee) {
                System.out.println("No se puede Formatear el dato Date(domain) a Date (util) :" + fee);
            }
            //System.out.println("Fecha Parciada a Util: " + dateUtil);
        }else if(tf ==2){
            
            SimpleDateFormat sdfUtil = new SimpleDateFormat("dd/MM/yyyy hh:mm aa");
            try {
                //devulev un String
                NFDate = sdfUtil.format(dateUtil);

                //System.out.println("Fecha Parciada a SimpleDateFormato : " + NFDate);


            } catch (Exception fee) {
                System.out.println("No se puede Formatear el dato Date(domain) a Date (util) :" + fee);
            }
            
        } else {
            SimpleDateFormat sdfUtil = new SimpleDateFormat("yyyy-MM-dd");
            try {
                //devulev un String
                NFDate = sdfUtil.format(dateUtil);
                //String pararlo a el formato Date

            } catch (Exception fee) {
                System.out.println("No se puede Formatear el dato Date(domain) a Date (util) :" + fee);
            }
            //System.out.println("Fecha Parciada a Util: " + dateUtil);
        }

        //System.out.println("Fecha Parciada a Util: " + dateUtil);
        return NFDate;
    }
    // End - Defect : El metodo fue correjido con el formato adecuado Author : Raul G. Date: 21/12/2013         

    /** metodo para lipiar de registros la tabla sucursal expendio**/
    public String cleanTabSucExp() {
        //this.getTabSucExpVO1().clearViewCriterias();
        TabSucExpVOImpl TabSucExpVO = this.getTabSucExpVO1();
        while (TabSucExpVO.hasNext()) {
            TabSucExpVO.removeCurrentRow();
        }
        //TabSucExpVO.removeCurrentRow();
        TabSucExpVO.clearCache();
        //System.out.println("TabSucExpVO.getRowCount= " + TabSucExpVO.getRowCount() );
        return null;
    }

    /** metodo para lipiar de registros la tabla Numero de partida**/
    public String cleanTabNumPart() {
        //this.getTabSucExpVO1().clearViewCriterias();
        TabNumPartVOImpl TabNumPartVO = this.getTabNumPartVO1();
        while (TabNumPartVO.hasNext()) {
            TabNumPartVO.removeCurrentRow();
        }
        //TabNumPartVO.removeCurrentRow();
        TabNumPartVO.clearCache();
        //System.out.println("TabNumPartVO.getRowCount= " + TabNumPartVO.getRowCount() );
        return null;
    }
    
    /** metodo para lipiar de registros la tabla Numero de partida a descartar */
    public String cleanTabNumPartDescartar() {
        //this.getTabSucExpVO1().clearViewCriterias();
        TabNumPartDesVOImpl TabNumPartDescartarVO = this.getTabNumPartDesVO1();
        
        while (TabNumPartDescartarVO.hasNext()) {
            TabNumPartDescartarVO.removeCurrentRow();
        }
        //TabNumPartVO.removeCurrentRow();
        TabNumPartDescartarVO.clearCache();
        //System.out.println("TabNumPartVO.getRowCount= " + TabNumPartVO.getRowCount() );
        return null;
    }
    
    /** metodo para agregar registros a la tabla Lista Archivos**/
       public String addFileName(String nombre) {

           //System.out.println("nombre: " +nombre +"");
           Row row = this.getListaArchivosVO1().createRow();
           row.setAttribute("Nombre",nombre);
           this.getListaArchivosVO1().insertRow(row);
           //System.out.println("Lista Archivos zise: "+this.getListaArchivosVO1().getRowCount() );
           return null;
       }
    
    /** metodo para agregar registros a la tabla Lista Archivos**/
       public String addFileNameNumPartDescartar(String nombre) {

           //System.out.println("nombre: " +nombre +"");
           Row row = this.getListaArchiDescartarVO1().createRow();
           row.setAttribute("Nombre",nombre);
           this.getListaArchiDescartarVO1().insertRow(row);
           //System.out.println("Lista Archivos zise: "+this.getListaArchivosVO1().getRowCount() );
           return null;
       }
       
    /** metodo para lipiar de registros la tabla Numero de partida**/
    public String cleanListaArchivos() {
           //System.out.println("cleanListaArchivos");
           ListaArchivosVOImpl ListaArchivosVO = this.getListaArchivosVO1();
           //System.out.println("ListaArchivosVO.getRowCount= " + ListaArchivosVO.getRowCount() );
           if(ListaArchivosVO.getRowCount()>0){
               for(int r=0; r<ListaArchivosVO.getRowCount(); r++){
                   ListaArchivosVO.getRowAtRangeIndex(r).remove(); 
               }
           ListaArchivosVO.clearCache();
           }
           //System.out.println("ListaArchivosVO.getRowCount= " + ListaArchivosVO.getRowCount() );
           return null;
       }
    
    /** metodo para lipiar de registros la tabla Numero de partida a descartar**/
    public String cleanListaArchivosNumPartDescartar() {
           //System.out.println("cleanListaArchivos");
           ListaArchiDescartarVOImpl ListaArchivosVO = this.getListaArchiDescartarVO1();
           //System.out.println("ListaArchivosVO.getRowCount= " + ListaArchivosVO.getRowCount() );
           if(ListaArchivosVO.getRowCount()>0){
               for(int r=0; r<ListaArchivosVO.getRowCount(); r++){
                   ListaArchivosVO.getRowAtRangeIndex(r).remove(); 
               }
           ListaArchivosVO.clearCache();
           }
           //System.out.println("ListaArchivosVO.getRowCount= " + ListaArchivosVO.getRowCount() );
           return null;
       }
    
    
    
    /**
     * Container's getter for ConcentradoraVO1.
     * @return ConcentradoraVO1
     */
    public ConcentradoraVOImpl getConcentradoraVO1() {
        return (ConcentradoraVOImpl) findViewObject("ConcentradoraVO1");
    }

    /**
     * Container's getter for ControlEtapasView1.
     * @return ControlEtapasView1
     */
    public ControlEtapasViewImpl getControlEtapasView1() {
        return (ControlEtapasViewImpl) findViewObject("ControlEtapasView1");
    }

    /**
     * Container's getter for EtapaNuevaVO1.
     * @return EtapaNuevaVO1
     */
    public ViewObjectImpl getEtapaNuevaVO1() {
        return (ViewObjectImpl) findViewObject("EtapaNuevaVO1");
    }

    /**
     * Container's getter for ListaArchivosVO1.
     * @return ListaArchivosVO1
     */
    public ListaArchivosVOImpl getListaArchivosVO1() {
        return (ListaArchivosVOImpl) findViewObject("ListaArchivosVO1");
    }

    /**
     * Container's getter for ListaFuenteVO1.
     * @return ListaFuenteVO1
     */
    public ListaFuenteVOImpl getListaFuenteVO1() {
        return (ListaFuenteVOImpl) findViewObject("ListaFuenteVO1");
    }

    /**
     * Container's getter for ListaOperadorAlmonedaVO1.
     * @return ListaOperadorAlmonedaVO1
     */
    public ListaOperadorAlmonedaVOImpl getListaOperadorAlmonedaVO1() {
        return (ListaOperadorAlmonedaVOImpl) findViewObject("ListaOperadorAlmonedaVO1");
    }

    /**
     * Container's getter for ListaSucursalesVO1.
     * @return ListaSucursalesVO1
     */
    public ListaSucursalesVOImpl getListaSucursalesVO1() {
        return (ListaSucursalesVOImpl) findViewObject("ListaSucursalesVO1");
    }

    /**
     * Container's getter for MaximaEtapaVO1.
     * @return MaximaEtapaVO1
     */
    public MaximaEtapaVOImpl getMaximaEtapaVO1() {
        return (MaximaEtapaVOImpl) findViewObject("MaximaEtapaVO1");
    }

    /**
     * Container's getter for MaximaSubEtapaVO1.
     * @return MaximaSubEtapaVO1
     */
    public MaximaSubEtapaVOImpl getMaximaSubEtapaVO1() {
        return (MaximaSubEtapaVOImpl) findViewObject("MaximaSubEtapaVO1");
    }


    /**
     * Container's getter for SecuenciaIDSolicitud1.
     * @return SecuenciaIDSolicitud1
     */
    public SecuenciaIDSolicitudImpl getSecuenciaIDSolicitud1() {
        return (SecuenciaIDSolicitudImpl) findViewObject("SecuenciaIDSolicitud1");
    }


    /**
     * Container's getter for TabNumPartVO1.
     * @return TabNumPartVO1
     */
    public TabNumPartVOImpl getTabNumPartVO1() {
        return (TabNumPartVOImpl) findViewObject("TabNumPartVO1");
    }

    /**
     * Container's getter for TabSucExpVO1.
     * @return TabSucExpVO1
     */
    public TabSucExpVOImpl getTabSucExpVO1() {
        return (TabSucExpVOImpl) findViewObject("TabSucExpVO1");
    }

    /**
     * Container's getter for RolByIdVO1.
     * @return RolByIdVO1
     */
    public RolByIdVOImpl getRolByIdVO1() {
        return (RolByIdVOImpl) findViewObject("RolByIdVO1");
    }

    /**
     * Container's getter for UserByIdVO1.
     * @return UserByIdVO1
     */
    public UserByIdVOImpl getUserByIdVO1() {
        return (UserByIdVOImpl) findViewObject("UserByIdVO1");
    }


    /**
     * Container's getter for TabNumPartDesVO1.
     * @return TabNumPartDesVO1
     */
    public TabNumPartDesVOImpl getTabNumPartDesVO1() {
        return (TabNumPartDesVOImpl) findViewObject("TabNumPartDesVO1");
    }

    /**
     * Container's getter for ListaArchiDescartarVO1.
     * @return ListaArchiDescartarVO1
     */
    public ListaArchiDescartarVOImpl getListaArchiDescartarVO1() {
        return (ListaArchiDescartarVOImpl) findViewObject("ListaArchiDescartarVO1");
    }
}

